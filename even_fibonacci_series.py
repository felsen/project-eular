"""
Each new term in the Fibonacci sequence is
generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence
whose values do not exceed four million, find the sum of the even-valued terms.
4613732
"""
import math


def main():
    ten_numbers = [0, 1]
    for i in xrange(0, 10):
        b = ten_numbers[-1] + ten_numbers[-2]
        ten_numbers.append(b)
    return sum(ten_numbers)


def fib_series(n):
    """ nth element of fibo series. """
    x, y, number = 0, 1, []
    for i in xrange(n):
        x, y = y, x+y
        number.append(y)
    return number


def method1():
    fib = [0, 1]
    counter = 0
    num = []
    for i in xrange(1, 50):
        if (counter < 4000000) and (counter % 2 == 0):
            num.append(counter)
        s = fib[-1] + fib[-2]
        counter = s
        fib.append(s)
    return sum(num)


def method2():
    """
    this will give the total number of fibnocci series in the list.
    """
    fib = lambda n: reduce(lambda x, _: x+[x[-1]+x[-2]], xrange(n-1), [0, 1])
    return fib(10)


def method3(n):
    a, b = 0, 1
    for i in range(n):
        a, b = b, a+b
    return a


def is_fibnocci(n):
    """
    Check the given number is fibanocci number or not.
    """
    phi = 0.5 + 0.5 * math.sqrt(5.0)
    a = phi * n
    return n == 0 or abs(round(a) - a) < 1.0 / n


if __name__ == "__main__":
    print main()
    print method1()
    print method2()
    print method3(10)
    print is_fibnocci(55)
    
